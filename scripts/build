#!/usr/bin/env node
const fs = require('fs')
const fsPromises = require('fs/promises')
const crypto = require('crypto')
const compress = require('brotli/compress')

0 ||
  (async function () {
    await fsPromises.mkdir('./build', { recursive: true })

    const collections = await Promise.all(
      (await fsPromises.readdir('./collections')).map(
        async (collection) => {
          const layers = await Promise.all(
            (
              await fsPromises.readdir(
                `./collections/${collection}/layers`,
              )
            )
              .map((attachment) =>
                attachment.substring(0, attachment.lastIndexOf('.')),
              )
              .map(async (layer) => {
                const sum = crypto.createHash('sha1')
                const sourcePath = `collections/${collection}/layers/${layer}.json`

                const compressed = compress(
                  await fsPromises.readFile(sourcePath),
                )

                sum.update(compressed)

                const destinationFileName = `/${sum.digest('hex')}.br.json`

                await fsPromises.writeFile(
                  `build${destinationFileName}`,
                  compressed,
                )
                return { layerName: layer, path: destinationFileName }
              }),
          )

          const { displayName } = await fsPromises
            .readFile(`collections/${collection}/index.json`)
            .then((response) => JSON.parse(response))

          return {
            layers,
            displayName,
            name: collection,
          }
        },
      ),
    )
    await fsPromises.writeFile(
      'build/v4.br.json',
      compress(Buffer.from(JSON.stringify({ collections }))),
    )
  })()
