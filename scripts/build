#!/usr/bin/env node
const fs = require('fs')
const fsPromises = require('fs/promises')
const crypto = require('crypto')

0 ||
  (async function () {
    await fsPromises.mkdir('./build', { recursive: true })

    const collections = await Promise.all(
      (await fsPromises.readdir('./collections')).map(
        async (collection) => {
          const attachments = (
            await Promise.all(
              (await fsPromises.readdir(`./collections/${collection}`))
                .filter((attachment) => attachment !== 'index.json')
                .map((attachment) =>
                  attachment.substring(0, attachment.lastIndexOf('.')),
                )
                .map(async (attachment) => {
                  const sum = crypto.createHash('sha1')
                  const sourcePath = `collections/${collection}/${attachment}.json`

                  sum.update(await fsPromises.readFile(sourcePath))

                  const destinationFileName = `${sum.digest('hex')}.json`

                  await fsPromises.copyFile(
                    sourcePath,
                    `build/${destinationFileName}`,
                  )

                  return [attachment, destinationFileName]
                }),
            )
          ).reduce(
            (attachments, [attachment, destinationFileName]) => ({
              ...attachments,
              [[attachment]]: destinationFileName,
            }),
            {},
          )

          const { displayName } = await fsPromises
            .readFile(`collections/${collection}/index.json`)
            .then((response) => JSON.parse(response))

          return {
            ...attachments,
            displayName,
            name: collection,
          }
        },
      ),
    )

    fs.writeFileSync('build/v2.json', JSON.stringify({ collections }))
  })()
