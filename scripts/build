#!/usr/bin/env node
const fs = require('fs')
const fsPromises = require('fs/promises')
const crypto = require('crypto')

0 ||
  (async function () {
    await fsPromises.mkdir('./build', { recursive: true })

    const collections = await Promise.all(
      (await fsPromises.readdir('./collections')).map(
        async (collection) => {
          const layers = await Promise.all(
            (
              await fsPromises.readdir(
                `./collections/${collection}/layers`,
              )
            )
              .map((attachment) =>
                attachment.substring(0, attachment.lastIndexOf('.')),
              )
              .map(async (layer) => {
                const sum = crypto.createHash('sha1')
                const sourcePath = `collections/${collection}/layers/${layer}.json`

                sum.update(await fsPromises.readFile(sourcePath))

                const destinationFileName = `/${sum.digest('hex')}.json`

                await fsPromises.copyFile(
                  sourcePath,
                  `build${destinationFileName}`,
                )

                return { layerName: layer, path: destinationFileName }
              }),
          )

          const { displayName } = await fsPromises
            .readFile(`collections/${collection}/index.json`)
            .then((response) => JSON.parse(response))

          return {
            layers,
            displayName,
            name: collection,
          }
        },
      ),
    )

    fs.writeFileSync('build/v3.json', JSON.stringify({ collections }))
  })()
